 if (target != Vector3.zero && Vector2.Distance(transform.position, target) > 0.75f)
        {
            transform.position = Vector2.MoveTowards(transform.position, target, moveSpeed * Time.deltaTime);
        }


public void Chasing()
    {
        Physics2D.IgnoreCollision(GetComponent<CapsuleCollider2D>(), player.GetComponent<CapsuleCollider2D>(), ignoreCollider = false);
        //transform.position = Vector2.MoveTowards(transform.position, fov.lastSeenPos, moveSpeed * Time.deltaTime);
    }


public void Move()
    {
        target = waypoints[randomWaypoint].position;
        if (player.behindCover)
        {
            Physics2D.IgnoreCollision(GetComponent<CapsuleCollider2D>(), player.GetComponent<CapsuleCollider2D>(), ignoreCollider = true);
        }
        else
        {
            Physics2D.IgnoreCollision(GetComponent<CapsuleCollider2D>(), player.GetComponent<CapsuleCollider2D>(), ignoreCollider = false);
        }

        if (Vector3.Distance(transform.position, waypoints[randomWaypoint].position) < 0.80f)
        {
            if(waitTime <= 0)
            {
                randomWaypoint = UnityEngine.Random.Range(0, waypoints.Length);
                waitTime = startWaitTime;
            }
            else
            {
                waitTime -= Time.deltaTime;
            }
        }
    }



public void Investigating()
    {
        Physics2D.IgnoreCollision(GetComponent<CapsuleCollider2D>(), player.GetComponent<CapsuleCollider2D>(), ignoreCollider = true);

        if (!onLastSeenPos && Vector2.Distance(transform.position, fov.lastSeenPos) > 0.75f)
        {
            //target = fov.lastSeenPos;
            onLastSeenPos = false;
        }
        if(Vector2.Distance(transform.position, fov.lastSeenPos) <= 3f)
        {
            onLastSeenPos = true;
        }
        if (onLastSeenPos)
        {
            GameObject[] covers = GameObject.FindGameObjectsWithTag("Cover");
            SortCovers(covers);
            closestCover = null;

            for (int i = 0; i < covers.Length; i++)
            {
                if (closestCover == null)
                {
                    if (transform.rotation == Quaternion.Euler(0, 0, 0) && transform.position.x > covers[i].transform.position.x)
                    {
                        closestCover = covers[i];
                    }

                    if (transform.rotation == Quaternion.Euler(0, 180, 0) && transform.position.x < covers[i].transform.position.x)
                    {
                        closestCover = covers[i];
                    }
                }
            }
            if(closestCover != null)
            {
                target = closestCover.transform.position;
                GetPlayerOutOfCover(closestCover);
            }
        }
        Debug.Log(closestCover);
        onLastSeenPos = false;
        DecreaseDetectionValue();

    }

